env:
  global:
    secure: "dItRuCjvOTlkBNv861GkfaeW35bqVirZLXSXblsylpO4KmDDkvoTwYaMxryMMJAw37uinCcT8FNyH1j2ryS68eEpmJ1hLKwGu+0IUfUjfGq9CnUMRtAZhMxER37rVdBl7+JFfEnriFAxpLpQSG3M04HiAVmo4MSaWhAH0dR/1+DSmkrw6H9NSSAJeNjvAnBBPRf6Qy3750RkXgI0q9fFK/d+Tg8tuiWnjobuK9/A9ycfB5AeQmy3GwN2GnWPWGIKhQ/dlR3lkzx/iIMnMurUG/fZJ8ZvOoCcxs8ZsYWZLrEQXcobM1yD3LeaTGM/yQDXtjAm6dKOVLENDZxZkD78KOPLT+joFGJ22XuSPJP+Bi5yMc7YbUqv+4SzgfJm/KqimgySqVaq/O2eXMqw/ekODuMoktE20NFOWK+BeYO8WvDAaaQ0uTHTspx3Dnrw0Qe4W+8uetogeWnsHhEANU7NfVC62k6ESc7OBq/oa58Wgy/t4ANwypUwCPp/sHeDvog+awsCmxEw8yU4RUmpxNe4hvxnmm7G1w7ARFTYq65O1GskSBErLGbPCOVkFzWYH69xOmG6yCTFmeFXHP2BV3Q9hefwxySHLlS+hoED6vWgfv2y1fHepKCTpvC3xMo4SOO8xACx0OjOt4JVRBwnG4PMON+0XhszSpioE2ZjDbelnM0="
    secure: "XcZYmgu6qmtvghmGsohkR5786cou+3anFxTT02fPSKCx/2z8fW9zC+Wr5Zew31FMIgvhLKOq1dcolvqNSEPiXt+8V/7TKSzog4n4kMlqUghqL3w69robeJUofwh4Eb3d2e3ayGoEMvACKutC8iuLaZxYhVrDQO/J5qIarUKjuZVNWfQprgeED/AH5HtJ7Uvy4S31D9aL5awytMxCz6/Sk86yRXfsdWoCURJDextbcuxLhXjoARI4/5d2hLHBP8u1BoFjs9652mSr63/fPxvxFhZ8Rbz8bl/9oCqd7MxFaGaZrXq+LiUTuYFQDbh++tr3PrJJv6/Msp6E7ghJkO30gGA+x7imOplsyjaHu50Mx4e1lS7R3kfOA+YL79IRR4fRmRPVk6hcGPh8iEXGUBhbgqVWMybCluVzsXlY8c+/SLD1kUZsZhDyA8zR/e1BcE/hRT+oYPMpFl+xdbexHMUY9+o/xvB9ojU52QA5YB5xO4rpU+8m5NeUGsZ0MeWWRloD+dio27cysaKt/lT8WIluo55NKF9klmXW1ihQvPkJKmGjquG6gNtpAbeUiPmMM0haDcq8FO0yqy0ztJH0VKSzF53JyRL1mx7Lc4F3Cgls/VOgUoKyRjarWYmI77PJ26WSL8lvadgrk8yWdi0tkBjjbZP52VBxHAt5wdeDw5zNRQ8="
matrix:
  fast_finish: true
  include:
    - language: python
      python: 2.7
      os: linux
      dist: trusty
    - language: python
      python: 3.5
      os: linux
      dist: trusty
    - language: generic
      env: PY=2
      os: osx
    - language: generic
      env: PY=3
      os: osx
    - sudo: required
      services:
        - docker
      env: DOCKER_IMAGE=quay.io/pypa/manylinux1_x86_64
    - sudo: required
      services:
        - docker
      env: DOCKER_IMAGE=quay.io/pypa/manylinux1_i686
           PRE_CMD=linux32

install:
  - if [ "${TRAVIS_OS_NAME}" == "linux" ] && [ "${DOCKER_IMAGE}" == "" ]; then
      sudo apt-get update;
      sudo apt-get -y install libsdl2-dev libsdl2-mixer-dev python-dev;
      mkdir ~/ffmpeg_sources;
      export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$HOME/ffmpeg_build/lib;

      sudo apt-get -y install yasm;
      cd ~/ffmpeg_sources;
      wget http://www.tortall.net/projects/yasm/releases/yasm-1.3.0.tar.gz;
      tar xzf yasm-1.3.0.tar.gz;
      cd yasm-1.3.0;
      ./configure --prefix="$HOME/ffmpeg_build" --bindir="$HOME/ffmpeg_build/bin";
      make;
      make install;
      make distclean;

      sudo apt-get -y install nasm;
      cd /home/cpl/python/ffmpeg_sources;
      wget http://www.nasm.us/pub/nasm/releasebuilds/2.13.01/nasm-2.13.01.tar.xz;
      tar xf nasm-2.13.01.tar.xz;
      cd nasm-2.13.01;
      ./configure --prefix="/home/cpl/python/ffmpeg_build" --bindir="/home/cpl/python/ffmpeg_build/bin";
      make;
      make install;
      make distclean;

      sudo apt-get -y install libx264-dev;
      cd ~/ffmpeg_sources;
      wget http://download.videolan.org/pub/x264/snapshots/last_x264.tar.bz2;
      tar xjf last_x264.tar.bz2;
      cd x264-snapshot*;
      PATH="$HOME/ffmpeg_build/bin:$PATH" ./configure --prefix="$HOME/ffmpeg_build" --bindir="$HOME/ffmpeg_build/bin" --enable-shared --extra-cflags="-fPIC";
      PATH="$HOME/ffmpeg_build/bin:$PATH" make;
      make install;
      make distclean;

      sudo apt-get -y install libmp3lame-dev;
      sudo apt-get -y install nasm;
      cd ~/ffmpeg_sources;
      wget http://downloads.sourceforge.net/project/lame/lame/3.99/lame-3.99.5.tar.gz;
      tar xzf lame-3.99.5.tar.gz;
      cd lame-3.99.5;
      ./configure --prefix="$HOME/ffmpeg_build" --enable-nasm --enable-shared;
      make;
      make install;
      make distclean;

      sudo apt-get -y install libass-dev libfreetype6-dev libtheora-dev libvorbis-dev;
      cd ~/ffmpeg_sources;
      wget http://ffmpeg.org/releases/ffmpeg-snapshot.tar.bz2;
      tar xjf ffmpeg-snapshot.tar.bz2;
      cd ffmpeg;
      PATH="$HOME/ffmpeg_build/bin:$PATH" PKG_CONFIG_PATH="$HOME/ffmpeg_build/lib/pkgconfig" ./configure --prefix="$HOME/ffmpeg_build" --extra-cflags="-I$HOME/ffmpeg_build/include -fPIC" --extra-ldflags="-L$HOME/ffmpeg_build/lib" --bindir="$HOME/ffmpeg_build/bin" --enable-gpl --enable-libass --enable-libfreetype --enable-libmp3lame --enable-libtheora --enable-libvorbis --enable-libx264 --enable-shared;
      PATH="$HOME/ffmpeg_build/bin:$PATH" make;
      make install;
      make distclean;
      hash -r;

      pip install --upgrade cython nose;
    fi;
  - if [ "${TRAVIS_OS_NAME}" == "osx" ]; then
      brew update;
      brew install sdl2;
      brew install sdl2_mixer;
      brew install ffmpeg --with-freetype --with-libass --with-libvorbis --with-libvpx --with-libmp3lame --with-x264 --with-libtheora;
      if [ "${PY}" == "3" ]; then
         curl -O -L https://www.python.org/ftp/python/3.5.1/python-3.5.1-macosx10.6.pkg;
         sudo installer -package python-3.5.1-macosx10.6.pkg -target /;
         pip3 install --upgrade --user cython nose;
      else
         pip install --upgrade --user cython nose;
      fi;
    fi;

before_script:
    cd "$TRAVIS_BUILD_DIR";
    export PYTHONPATH=$PYTHONPATH:$(pwd);
    export USE_SDL2_MIXER=1;

script:
  - if [ "${TRAVIS_OS_NAME}" == "linux" ] && [ "${DOCKER_IMAGE}" == "" ]; then
        PKG_CONFIG_PATH="$HOME/ffmpeg_build/lib/pkgconfig" make;
        make test;
    fi;
  - if [ "${TRAVIS_OS_NAME}" == "osx" ]; then
      if [ "${PY}" == "3" ]; then
         python3 setup.py build_ext --inplace;
         python3 -m nose.core ffpyplayer/tests;
      else
         make;
         make test;
      fi;
    fi;
  - if [ "${DOCKER_IMAGE}" != "" ]; then
      mkdir wheelhouse;
      mkdir upload;
      docker run --rm -v `pwd`:/io $DOCKER_IMAGE $PRE_CMD /io/.travis/build-wheels.sh;
      tar -czvf upload/ffpyplayer-wheels.tar.gz $(find wheelhouse/ -type f -name '*manylinux*');
      ls wheelhouse/;
      ls upload;
    fi;
deploy:
  provider: s3
  access_key_id: $ACCESS_KEY_ID
  secret_access_key: $SECRET_ACCESS_KEY
  bucket: "ffpyplayer-wheels"
  skip_cleanup: true
  region: us-east-1
  local_dir: upload
  upload-dir: ffpyplayer
  on:
    condition: "$DOCKER_IMAGE"
    all_branches: true
